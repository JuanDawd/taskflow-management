// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum ProjectRole {
  ADMIN
  MEMBER
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Company {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  projects Project[]
  teamMembers TeamMember[]

  @@map("companies")
}

model User {
  id       String   @id @default(cuid())
  email    String   @unique
  name     String
  avatar   String?
  role     UserRole @default(USER)
  password String

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   // Relaciones con tareas
  assignedTasks Task[] @relation("AssignedTasks")
  createdTasks  Task[] @relation("CreatedTasks")
  comments      TaskComment[]

  // Relaciones con proyectos
  projectMembers ProjectMember[]
  ownedProjects  Project[]       @relation("ProjectOwner")

  // Relaci√≥n con team members
  teamMember TeamMember?

  @@map("users")
}

model TeamMember {
  id   String      @id @default(cuid())
  role ProjectRole @default(MEMBER)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("team_members")
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?
  slug        String
  color       String  @default("#3B82F6")

  companyId String
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  ownerId String
  owner   User   @relation("ProjectOwner", fields: [ownerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks   Task[]
  members ProjectMember[]

  @@unique([companyId, slug])
  @@map("projects")
}

model ProjectMember {
  id String @id @default(cuid())
  role ProjectRole @default(MEMBER)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  joinedAt  DateTime @default(now())

  @@unique([userId, projectId])
  @@map("project_members")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(BACKLOG)
  priority    TaskPriority @default(MEDIUM)
  
  // Fechas
  dueDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relaciones
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId String?
  assignee   User?   @relation("AssignedTasks", fields: [assigneeId], references: [id])

  createdById String
  createdBy   User   @relation("CreatedTasks", fields: [createdById], references: [id])

  comments TaskComment[]
  attachments TaskAttachment[]

  @@map("tasks")
}

model TaskComment {
  id      String @id @default(cuid())
  content String

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("task_comments")
}

model TaskAttachment {
  id       String @id @default(cuid())
  filename String
  fileUrl  String
  fileSize Int
  mimeType String

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  uploadedAt DateTime @default(now())

  @@map("task_attachments")
}